{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","socket","io","path","tickerdict","$","on","connect","console","log","ReactDOM","render","document","getElementById","disconnect","Stocks","useState","updates","setUpdates","stocks","setStocks","exchanges","setExchanges","buys","setBuys","sells","setSells","volumen_total","setVolumen","useEffect","update","date","Date","time","currentData","ticker","value","buy","volume","sell","emit","data","d","company_name","table","pie_chart","ex","acciones","volumen_compra","volumen_venta","exchange","accion","listed_companies","buys_ticker","filter","b","sells_ticker","s","push","name","round","length","graphs","empresa","maximo_historico","minimo_historico","ultimo_valor","penultimo_valor","var_porcentual","elem","prices","valores_totales","map","p","max","min","quote_base","country","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","label","type","stroke","isAnimationActive","cx","cy","outerRadius","fill","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.64b9eb1c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Chart from \"react-google-charts\";\nimport io from 'socket.io-client';\nimport $ from 'jquery';\nimport { useEffect, useState } from 'react';\nimport {\n  LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, PieChart, Pie\n} from 'recharts';\nimport {\n  max, min, random, round\n} from 'mathjs'\n\nconst socket = io('wss://le-18262636.bitzonte.com', {\n  path: '/stocks'\n});\n\nvar tickerdict = {};\n\n$('#connect_button').on('click', function(){\n  socket.connect();\n  console.log('connect');\n  ReactDOM.render(<h2>Connected</h2>, document.getElementById('connection'));\n});\n\n$('#disconnect_button').on('click', function(){\n  socket.disconnect();\n  console.log('disconect');\n  ReactDOM.render(<h2>Disconnected</h2>, document.getElementById('connection'));\n});\n\nconst Stocks = ({}) => {\n  const [updates, setUpdates] = useState([]);\n  const [stocks, setStocks] = useState([]);\n  const [exchanges, setExchanges] = useState([]);\n  const [buys, setBuys] = useState([]);\n  const [sells, setSells] = useState([]);\n  const [volumen_total, setVolumen] = useState(0);\n\n  useEffect(() =>{\n    // ESCUCHANDO\n    socket.on('UPDATE', update => {\n      var date = new Date(update.time*1000);\n      setUpdates(currentData => [...currentData, {\"ticker\": update.ticker, \"time\": date, \"value\": update.value }]);\n    });\n    socket.on('BUY', buy =>{\n      var date = new Date(buy.time*1000);\n      setBuys(currentData => [...currentData, {\"ticker\": buy.ticker, \"time\": date, \"volume\": buy.volume }]);\n      //console.log(buy.volume);\n      setVolumen(volumen_total => volumen_total + buy.volume);\n    })\n    socket.on('SELL', sell =>{\n      var date = new Date(sell.time*1000);\n      setSells(currentData => [...currentData, {\"ticker\": sell.ticker, \"time\": date, \"volume\": sell.volume }]);\n      //console.log(sell.volume);\n      setVolumen(volumen_total => volumen_total + sell.volume);\n    })\n    //EMITO, LUEGO ESCUCHO\n    socket.emit('STOCKS');\n    socket.on('STOCKS', data => {\n      setStocks(currentData => data);\n      for(var d in data)\n      {\n        tickerdict[data[d].company_name] = data[d].ticker;\n      }\n      //console.log(tickerdict);\n    });\n    socket.emit('EXCHANGES');\n    socket.on('EXCHANGES', data => {\n      setExchanges(currentData => data);\n    });\n  }, []);\n\n  var table = [];\n  var pie_chart = [];\n  //console.log(buys);\n  //console.log(sells);\n\n  for(var ex in exchanges)\n  {\n    var volumen_compra = 0;\n    var volumen_venta = 0;\n    var acciones = [];\n    var exchange = exchanges[ex];\n    //console.log(exchange);\n    acciones = exchange.listed_companies;\n    //console.log(acciones);\n    for(var accion in acciones)\n    {\n      //console.log(tickerdict);\n      var ticker = tickerdict[acciones[accion]];\n      //console.log(ticker);\n      var buys_ticker = buys.filter(b => b.ticker === ticker);\n      //console.log(buys_ticker);\n      var sells_ticker = sells.filter(s => s.ticker === ticker);\n      for (var buy in buys_ticker)\n      {\n        //console.log(buys[buy].volume);\n        volumen_compra += buys_ticker[buy].volume;\n      };\n      for (var sell in sells_ticker)\n      {\n        volumen_venta += sells_ticker[sell].volume;\n      };\n    };\n    if(volumen_total > 0)\n    {\n      //pie_chart[exchange.name] = (volumen_compra + volumen_venta)/volumen_total;\n      pie_chart.push({\"name\": exchange.name, \"value\": round(((volumen_compra + volumen_venta)/volumen_total)*100)});\n    }\n    table.push(<tr>\n    <td>{exchange.name}</td>\n    <td>{volumen_compra}</td>\n    <td>{volumen_venta}</td>\n    <td>{volumen_compra+volumen_venta}</td>\n    <td>{acciones.length}</td>\n    <td>{round(((volumen_compra + volumen_venta)/volumen_total)*100)}</td>\n  </tr>)\n\n  };\n\n\n  var graphs = [];\n  for(var empresa in stocks)\n  {\n    var elem = stocks[empresa];\n    //console.log(elem);\n    var maximo_historico;\n    var minimo_historico;\n    var ultimo_valor;\n    var penultimo_valor;\n    var var_porcentual;\n    var prices = updates.filter(update => update.ticker === elem.ticker);\n    var valores_totales = prices.map(function(p){ return p.value } );\n    if(valores_totales.length !== 0)\n    {\n      maximo_historico = max(valores_totales);\n      minimo_historico = min(valores_totales);\n      ultimo_valor = valores_totales[valores_totales.length - 1];\n      if(valores_totales.length > 1)\n      {\n        penultimo_valor = valores_totales[valores_totales.length - 2];\n        var_porcentual = (ultimo_valor-penultimo_valor)/penultimo_valor*100;\n      }\n    }\n    //console.log(elem.ticker);\n    graphs.push(<div>\n    <h2>Empresa: {elem.company_name}</h2>\n    <h3>Moneda: {elem.quote_base}</h3>\n    <h3>País: {elem.country}</h3>\n    <p>Valor máximo: {maximo_historico}</p>\n    <p>Valor mínimo: {minimo_historico}</p>\n    <p>Último precio: {ultimo_valor}</p>\n    <p>Variación porcentual: {var_porcentual}%</p>\n    <LineChart\n      width={1000}\n      height={300}\n      data={prices}\n      margin={{\n        top: 5, right: 30, left: 20, bottom: 5,\n      }}\n    >\n      <CartesianGrid strokeDasharray=\"3 3\" />\n      <XAxis dataKey=\"time\" />\n      <YAxis label={elem.quote_base}/>\n      <Tooltip />\n      <Legend />\n      <Line type=\"monotone\" dataKey=\"value\" label=\"Valor acción\" stroke=\"#82ca9d\" />\n    </LineChart>\n    </div>);\n  };\n  return(\n    <div>\n      <h1>Mercado de valores</h1>\n      <table>\n      <tr>\n        <th>Nombre</th>\n        <th>Volumen de compra</th>\n        <th>Volumen de venta</th>\n        <th>Volumen total</th>\n        <th>Número de acciones</th>\n        <th>Porcentaje de Mercado</th>\n      </tr>\n      {table}\n      </table>\n      <h1>Porcentajes de mercado</h1>\n      <p>Total mercado:{volumen_total}</p>\n      <PieChart width={400} height={400}>\n        <Pie dataKey=\"value\" isAnimationActive={false} data={pie_chart} cx={200} cy={200} outerRadius={80} fill=\"#8884d8\" label/>\n        <Tooltip />\n      </PieChart>\n      <h1>Precio acciones</h1>\n      {graphs}\n    </div>\n  );\n};\n\nReactDOM.render(<Stocks />, document.getElementById('root'));\n\n\n\n// function tick() {\n//   const element = (\n//     <div style={{ display: 'flex', maxWidth: 900 }}>\n//   <Chart\n//     width={400}\n//     height={300}\n//     chartType=\"ColumnChart\"\n//     loader={<div>Loading Chart</div>}\n//     data={[\n//       ['City', '2010 Population', '2000 Population'],\n//       ['New York City, NY', 8175000, 8008000],\n//       ['Los Angeles, CA', 3792000, 3694000],\n//       ['Chicago, IL', 2695000, 2896000],\n//       ['Houston, TX', 2099000, 1953000],\n//       ['Philadelphia, PA', 1526000, 1517000],\n//     ]}\n//     options={{\n//       title: 'Population of Largest U.S. Cities',\n//       chartArea: { width: '30%' },\n//       hAxis: {\n//         title: 'Total Population',\n//         minValue: 0,\n//       },\n//       vAxis: {\n//         title: 'City',\n//       },\n//     }}\n//     legendToggle\n//   />\n//   <Chart\n//     width={400}\n//     height={'300px'}\n//     chartType=\"AreaChart\"\n//     loader={<div>Loading Chart</div>}\n//     data={[\n//       ['Year', 'Sales', 'Expenses'],\n//       ['2013', 1000, 400],\n//       ['2014', 1170, 460],\n//       ['2015', 660, 1120],\n//       ['2016', 1030, 540],\n//     ]}\n//     options={{\n//       title: 'Company Performance',\n//       hAxis: { title: 'Year', titleTextStyle: { color: '#333' } },\n//       vAxis: { minValue: 0 },\n//       // For the legend to fit, we make the chart area smaller\n//       chartArea: { width: '50%', height: '70%' },\n//       // lineWidth: 25\n//     }}\n//   />\n// </div>\n//   );\n//   ReactDOM.render(element, document.getElementById('root'));\n// }\n//\n// setInterval(tick, 1000);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}