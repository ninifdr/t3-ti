{"ast":null,"code":"var _jsxFileName = \"/Users/Bernardita/Desktop/Taller de integracio\\u0301n/T3/t3-ti/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Chart from \"react-google-charts\";\nimport io from 'socket.io-client';\nimport $ from 'jquery';\nimport { useEffect, useState } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, PieChart, Pie } from 'recharts';\nimport { max, min, random, round } from 'mathjs';\nconst socket = io('wss://le-18262636.bitzonte.com', {\n  path: '/stocks'\n});\nvar tickerdict = {};\n$('#connect_button').on('click', function () {\n  socket.connect();\n  console.log('connect');\n  ReactDOM.render( /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 19\n    }\n  }, \"Connected\"), document.getElementById('connection'));\n});\n$('#disconnect_button').on('click', function () {\n  socket.disconnect();\n  console.log('disconect');\n  ReactDOM.render( /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 19\n    }\n  }, \"Disconnected\"), document.getElementById('connection'));\n});\n\nconst Stocks = ({}) => {\n  const [updates, setUpdates] = useState([]);\n  const [stocks, setStocks] = useState([]);\n  const [exchanges, setExchanges] = useState([]);\n  const [buys, setBuys] = useState([]);\n  const [sells, setSells] = useState([]);\n  const [volumen_total, setVolumen] = useState(0);\n  useEffect(() => {\n    // ESCUCHANDO\n    socket.on('UPDATE', update => {\n      var date = new Date(update.time * 1000);\n      setUpdates(currentData => [...currentData, {\n        \"ticker\": update.ticker,\n        \"time\": date,\n        \"value\": update.value\n      }]);\n    });\n    socket.on('BUY', buy => {\n      var date = new Date(buy.time * 1000);\n      setBuys(currentData => [...currentData, {\n        \"ticker\": buy.ticker,\n        \"time\": date,\n        \"volume\": buy.volume\n      }]); //console.log(buy.volume);\n\n      setVolumen(volumen_total => volumen_total + buy.volume);\n    });\n    socket.on('SELL', sell => {\n      var date = new Date(sell.time * 1000);\n      setSells(currentData => [...currentData, {\n        \"ticker\": sell.ticker,\n        \"time\": date,\n        \"volume\": sell.volume\n      }]); //console.log(sell.volume);\n\n      setVolumen(volumen_total => volumen_total + sell.volume);\n    }); //EMITO, LUEGO ESCUCHO\n\n    socket.emit('STOCKS');\n    socket.on('STOCKS', data => {\n      setStocks(currentData => data);\n\n      for (var d in data) {\n        tickerdict[data[d].company_name] = data[d].ticker;\n      } //console.log(tickerdict);\n\n    });\n    socket.emit('EXCHANGES');\n    socket.on('EXCHANGES', data => {\n      setExchanges(currentData => data);\n    });\n  }, []);\n  var table = [];\n  var pie_chart = []; //console.log(buys);\n  //console.log(sells);\n\n  for (var ex in exchanges) {\n    var volumen_compra = 0;\n    var volumen_venta = 0;\n    var acciones = [];\n    var exchange = exchanges[ex]; //console.log(exchange);\n\n    acciones = exchange.listed_companies; //console.log(acciones);\n\n    for (var accion in acciones) {\n      //console.log(tickerdict);\n      var ticker = tickerdict[acciones[accion]]; //console.log(ticker);\n\n      var buys_ticker = buys.filter(b => b.ticker === ticker); //console.log(buys_ticker);\n\n      var sells_ticker = sells.filter(s => s.ticker === ticker);\n\n      for (var buy in buys_ticker) {\n        //console.log(buys[buy].volume);\n        volumen_compra += buys_ticker[buy].volume;\n      }\n\n      ;\n\n      for (var sell in sells_ticker) {\n        volumen_venta += sells_ticker[sell].volume;\n      }\n\n      ;\n    }\n\n    ;\n\n    if (volumen_total > 0) {\n      //pie_chart[exchange.name] = (volumen_compra + volumen_venta)/volumen_total;\n      pie_chart.push({\n        \"name\": exchange.name,\n        \"value\": round((volumen_compra + volumen_venta) / volumen_total * 100)\n      });\n    }\n\n    table.push( /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 16\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 5\n      }\n    }, exchange.name), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 5\n      }\n    }, volumen_compra), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 5\n      }\n    }, volumen_venta), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 5\n      }\n    }, volumen_compra + volumen_venta), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 5\n      }\n    }, acciones.length), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 5\n      }\n    }, round((volumen_compra + volumen_venta) / volumen_total * 100))));\n  }\n\n  ;\n  var graphs = [];\n\n  for (var empresa in stocks) {\n    var elem = stocks[empresa]; //console.log(elem);\n\n    var maximo_historico;\n    var minimo_historico;\n    var ultimo_valor;\n    var penultimo_valor;\n    var var_porcentual;\n    var prices = updates.filter(update => update.ticker === elem.ticker);\n    var valores_totales = prices.map(function (p) {\n      return p.value;\n    });\n\n    if (valores_totales.length !== 0) {\n      maximo_historico = max(valores_totales);\n      minimo_historico = min(valores_totales);\n      ultimo_valor = valores_totales[valores_totales.length - 1];\n\n      if (valores_totales.length > 1) {\n        penultimo_valor = valores_totales[valores_totales.length - 2];\n        var_porcentual = (ultimo_valor - penultimo_valor) / penultimo_valor * 100;\n      }\n    }\n\n    var ticker_buys = buys.filter(buy => buy.ticker === elem.ticker);\n    var ticker_sells = sells.filter(sell => sell.ticker === elem.ticker); //console.log(elem.ticker);\n\n    graphs.push( /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 5\n      }\n    }, \"Empresa: \", elem.company_name), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 5\n      }\n    }, \"Moneda: \", elem.quote_base), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 5\n      }\n    }, \"Pa\\xEDs: \", elem.country), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 5\n      }\n    }, \"Valor m\\xE1ximo: \", maximo_historico), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 5\n      }\n    }, \"Valor m\\xEDnimo: \", minimo_historico), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 5\n      }\n    }, \"\\xDAltimo precio: \", ultimo_valor), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 5\n      }\n    }, \"Variaci\\xF3n porcentual: \", var_porcentual, \"%\"), /*#__PURE__*/React.createElement(LineChart, {\n      width: 1000,\n      height: 300,\n      data: prices,\n      margin: {\n        top: 5,\n        right: 30,\n        left: 20,\n        bottom: 5\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(CartesianGrid, {\n      strokeDasharray: \"3 3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"time\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      label: elem.quote_base,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(Tooltip, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(Legend, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(Line, {\n      type: \"monotone\",\n      dataKey: \"value\",\n      label: \"Valor acci\\xF3n\",\n      stroke: \"#82ca9d\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 7\n      }\n    }))));\n  }\n\n  ;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }\n  }, \"Mercado de valores\"), /*#__PURE__*/React.createElement(\"table\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 9\n    }\n  }, \"Nombre\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 9\n    }\n  }, \"Volumen de compra\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 9\n    }\n  }, \"Volumen de venta\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 9\n    }\n  }, \"Volumen total\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 9\n    }\n  }, \"N\\xFAmero de acciones\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 9\n    }\n  }, \"Porcentaje de Mercado\")), table), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }\n  }, \"Porcentajes de mercado\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }\n  }, \"Total mercado:\", volumen_total), /*#__PURE__*/React.createElement(PieChart, {\n    width: 400,\n    height: 400,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Pie, {\n    dataKey: \"value\",\n    isAnimationActive: false,\n    data: pie_chart,\n    cx: 200,\n    cy: 200,\n    outerRadius: 80,\n    fill: \"#8884d8\",\n    label: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }\n  }, \"Precio acciones\"), graphs);\n};\n\nReactDOM.render( /*#__PURE__*/React.createElement(Stocks, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 202,\n    columnNumber: 17\n  }\n}), document.getElementById('root')); // function tick() {\n//   const element = (\n//     <div style={{ display: 'flex', maxWidth: 900 }}>\n//   <Chart\n//     width={400}\n//     height={300}\n//     chartType=\"ColumnChart\"\n//     loader={<div>Loading Chart</div>}\n//     data={[\n//       ['City', '2010 Population', '2000 Population'],\n//       ['New York City, NY', 8175000, 8008000],\n//       ['Los Angeles, CA', 3792000, 3694000],\n//       ['Chicago, IL', 2695000, 2896000],\n//       ['Houston, TX', 2099000, 1953000],\n//       ['Philadelphia, PA', 1526000, 1517000],\n//     ]}\n//     options={{\n//       title: 'Population of Largest U.S. Cities',\n//       chartArea: { width: '30%' },\n//       hAxis: {\n//         title: 'Total Population',\n//         minValue: 0,\n//       },\n//       vAxis: {\n//         title: 'City',\n//       },\n//     }}\n//     legendToggle\n//   />\n//   <Chart\n//     width={400}\n//     height={'300px'}\n//     chartType=\"AreaChart\"\n//     loader={<div>Loading Chart</div>}\n//     data={[\n//       ['Year', 'Sales', 'Expenses'],\n//       ['2013', 1000, 400],\n//       ['2014', 1170, 460],\n//       ['2015', 660, 1120],\n//       ['2016', 1030, 540],\n//     ]}\n//     options={{\n//       title: 'Company Performance',\n//       hAxis: { title: 'Year', titleTextStyle: { color: '#333' } },\n//       vAxis: { minValue: 0 },\n//       // For the legend to fit, we make the chart area smaller\n//       chartArea: { width: '50%', height: '70%' },\n//       // lineWidth: 25\n//     }}\n//   />\n// </div>\n//   );\n//   ReactDOM.render(element, document.getElementById('root'));\n// }\n//\n// setInterval(tick, 1000);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();","map":{"version":3,"sources":["/Users/Bernardita/Desktop/Taller de integración/T3/t3-ti/src/index.js"],"names":["React","ReactDOM","serviceWorker","Chart","io","$","useEffect","useState","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","PieChart","Pie","max","min","random","round","socket","path","tickerdict","on","connect","console","log","render","document","getElementById","disconnect","Stocks","updates","setUpdates","stocks","setStocks","exchanges","setExchanges","buys","setBuys","sells","setSells","volumen_total","setVolumen","update","date","Date","time","currentData","ticker","value","buy","volume","sell","emit","data","d","company_name","table","pie_chart","ex","volumen_compra","volumen_venta","acciones","exchange","listed_companies","accion","buys_ticker","filter","b","sells_ticker","s","push","name","length","graphs","empresa","elem","maximo_historico","minimo_historico","ultimo_valor","penultimo_valor","var_porcentual","prices","valores_totales","map","p","ticker_buys","ticker_sells","quote_base","country","top","right","left","bottom","unregister"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Chart from \"react-google-charts\";\nimport io from 'socket.io-client';\nimport $ from 'jquery';\nimport { useEffect, useState } from 'react';\nimport {\n  LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, PieChart, Pie\n} from 'recharts';\nimport {\n  max, min, random, round\n} from 'mathjs'\n\nconst socket = io('wss://le-18262636.bitzonte.com', {\n  path: '/stocks'\n});\n\nvar tickerdict = {};\n\n$('#connect_button').on('click', function(){\n  socket.connect();\n  console.log('connect');\n  ReactDOM.render(<h2>Connected</h2>, document.getElementById('connection'));\n});\n\n$('#disconnect_button').on('click', function(){\n  socket.disconnect();\n  console.log('disconect');\n  ReactDOM.render(<h2>Disconnected</h2>, document.getElementById('connection'));\n});\n\nconst Stocks = ({}) => {\n  const [updates, setUpdates] = useState([]);\n  const [stocks, setStocks] = useState([]);\n  const [exchanges, setExchanges] = useState([]);\n  const [buys, setBuys] = useState([]);\n  const [sells, setSells] = useState([]);\n  const [volumen_total, setVolumen] = useState(0);\n\n  useEffect(() =>{\n    // ESCUCHANDO\n    socket.on('UPDATE', update => {\n      var date = new Date(update.time*1000);\n      setUpdates(currentData => [...currentData, {\"ticker\": update.ticker, \"time\": date, \"value\": update.value }]);\n    });\n    socket.on('BUY', buy =>{\n      var date = new Date(buy.time*1000);\n      setBuys(currentData => [...currentData, {\"ticker\": buy.ticker, \"time\": date, \"volume\": buy.volume }]);\n      //console.log(buy.volume);\n      setVolumen(volumen_total => volumen_total + buy.volume);\n    })\n    socket.on('SELL', sell =>{\n      var date = new Date(sell.time*1000);\n      setSells(currentData => [...currentData, {\"ticker\": sell.ticker, \"time\": date, \"volume\": sell.volume }]);\n      //console.log(sell.volume);\n      setVolumen(volumen_total => volumen_total + sell.volume);\n    })\n    //EMITO, LUEGO ESCUCHO\n    socket.emit('STOCKS');\n    socket.on('STOCKS', data => {\n      setStocks(currentData => data);\n      for(var d in data)\n      {\n        tickerdict[data[d].company_name] = data[d].ticker;\n      }\n      //console.log(tickerdict);\n    });\n    socket.emit('EXCHANGES');\n    socket.on('EXCHANGES', data => {\n      setExchanges(currentData => data);\n    });\n  }, []);\n\n  var table = [];\n  var pie_chart = [];\n  //console.log(buys);\n  //console.log(sells);\n\n  for(var ex in exchanges)\n  {\n    var volumen_compra = 0;\n    var volumen_venta = 0;\n    var acciones = [];\n    var exchange = exchanges[ex];\n    //console.log(exchange);\n    acciones = exchange.listed_companies;\n    //console.log(acciones);\n    for(var accion in acciones)\n    {\n      //console.log(tickerdict);\n      var ticker = tickerdict[acciones[accion]];\n      //console.log(ticker);\n      var buys_ticker = buys.filter(b => b.ticker === ticker);\n      //console.log(buys_ticker);\n      var sells_ticker = sells.filter(s => s.ticker === ticker);\n      for (var buy in buys_ticker)\n      {\n        //console.log(buys[buy].volume);\n        volumen_compra += buys_ticker[buy].volume;\n      };\n      for (var sell in sells_ticker)\n      {\n        volumen_venta += sells_ticker[sell].volume;\n      };\n    };\n    if(volumen_total > 0)\n    {\n      //pie_chart[exchange.name] = (volumen_compra + volumen_venta)/volumen_total;\n      pie_chart.push({\"name\": exchange.name, \"value\": round(((volumen_compra + volumen_venta)/volumen_total)*100)});\n    }\n    table.push(<tr>\n    <td>{exchange.name}</td>\n    <td>{volumen_compra}</td>\n    <td>{volumen_venta}</td>\n    <td>{volumen_compra+volumen_venta}</td>\n    <td>{acciones.length}</td>\n    <td>{round(((volumen_compra + volumen_venta)/volumen_total)*100)}</td>\n  </tr>)\n\n  };\n\n\n  var graphs = [];\n  for(var empresa in stocks)\n  {\n    var elem = stocks[empresa];\n    //console.log(elem);\n    var maximo_historico;\n    var minimo_historico;\n    var ultimo_valor;\n    var penultimo_valor;\n    var var_porcentual;\n    var prices = updates.filter(update => update.ticker === elem.ticker);\n    var valores_totales = prices.map(function(p){ return p.value } );\n    if(valores_totales.length !== 0)\n    {\n      maximo_historico = max(valores_totales);\n      minimo_historico = min(valores_totales);\n      ultimo_valor = valores_totales[valores_totales.length - 1];\n      if(valores_totales.length > 1)\n      {\n        penultimo_valor = valores_totales[valores_totales.length - 2];\n        var_porcentual = (ultimo_valor-penultimo_valor)/penultimo_valor*100;\n      }\n    }\n    var ticker_buys = buys.filter(buy => buy.ticker === elem.ticker);\n    var ticker_sells = sells.filter(sell => sell.ticker === elem.ticker);\n    //console.log(elem.ticker);\n    graphs.push(<div>\n    <h2>Empresa: {elem.company_name}</h2>\n    <h3>Moneda: {elem.quote_base}</h3>\n    <h3>País: {elem.country}</h3>\n    <p>Valor máximo: {maximo_historico}</p>\n    <p>Valor mínimo: {minimo_historico}</p>\n    <p>Último precio: {ultimo_valor}</p>\n    <p>Variación porcentual: {var_porcentual}%</p>\n    <LineChart\n      width={1000}\n      height={300}\n      data={prices}\n      margin={{\n        top: 5, right: 30, left: 20, bottom: 5,\n      }}\n    >\n      <CartesianGrid strokeDasharray=\"3 3\" />\n      <XAxis dataKey=\"time\" />\n      <YAxis label={elem.quote_base}/>\n      <Tooltip />\n      <Legend />\n      <Line type=\"monotone\" dataKey=\"value\" label=\"Valor acción\" stroke=\"#82ca9d\" />\n    </LineChart>\n    </div>);\n  };\n  return(\n    <div>\n      <h1>Mercado de valores</h1>\n      <table>\n      <tr>\n        <th>Nombre</th>\n        <th>Volumen de compra</th>\n        <th>Volumen de venta</th>\n        <th>Volumen total</th>\n        <th>Número de acciones</th>\n        <th>Porcentaje de Mercado</th>\n      </tr>\n      {table}\n      </table>\n      <h1>Porcentajes de mercado</h1>\n      <p>Total mercado:{volumen_total}</p>\n      <PieChart width={400} height={400}>\n        <Pie dataKey=\"value\" isAnimationActive={false} data={pie_chart} cx={200} cy={200} outerRadius={80} fill=\"#8884d8\" label/>\n        <Tooltip />\n      </PieChart>\n      <h1>Precio acciones</h1>\n      {graphs}\n    </div>\n  );\n};\n\nReactDOM.render(<Stocks />, document.getElementById('root'));\n\n\n\n// function tick() {\n//   const element = (\n//     <div style={{ display: 'flex', maxWidth: 900 }}>\n//   <Chart\n//     width={400}\n//     height={300}\n//     chartType=\"ColumnChart\"\n//     loader={<div>Loading Chart</div>}\n//     data={[\n//       ['City', '2010 Population', '2000 Population'],\n//       ['New York City, NY', 8175000, 8008000],\n//       ['Los Angeles, CA', 3792000, 3694000],\n//       ['Chicago, IL', 2695000, 2896000],\n//       ['Houston, TX', 2099000, 1953000],\n//       ['Philadelphia, PA', 1526000, 1517000],\n//     ]}\n//     options={{\n//       title: 'Population of Largest U.S. Cities',\n//       chartArea: { width: '30%' },\n//       hAxis: {\n//         title: 'Total Population',\n//         minValue: 0,\n//       },\n//       vAxis: {\n//         title: 'City',\n//       },\n//     }}\n//     legendToggle\n//   />\n//   <Chart\n//     width={400}\n//     height={'300px'}\n//     chartType=\"AreaChart\"\n//     loader={<div>Loading Chart</div>}\n//     data={[\n//       ['Year', 'Sales', 'Expenses'],\n//       ['2013', 1000, 400],\n//       ['2014', 1170, 460],\n//       ['2015', 660, 1120],\n//       ['2016', 1030, 540],\n//     ]}\n//     options={{\n//       title: 'Company Performance',\n//       hAxis: { title: 'Year', titleTextStyle: { color: '#333' } },\n//       vAxis: { minValue: 0 },\n//       // For the legend to fit, we make the chart area smaller\n//       chartArea: { width: '50%', height: '70%' },\n//       // lineWidth: 25\n//     }}\n//   />\n// </div>\n//   );\n//   ReactDOM.render(element, document.getElementById('root'));\n// }\n//\n// setInterval(tick, 1000);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}