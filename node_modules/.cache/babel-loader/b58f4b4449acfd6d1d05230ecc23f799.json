{"ast":null,"code":"import _toConsumableArray from\"/Users/Bernardita/Desktop/Taller de integracio\\u0301n/T3/t3-ti/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/Users/Bernardita/Desktop/Taller de integracio\\u0301n/T3/t3-ti/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _objectDestructuringEmpty from\"/Users/Bernardita/Desktop/Taller de integracio\\u0301n/T3/t3-ti/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty\";import React from'react';import ReactDOM from'react-dom';import'./index.css';import*as serviceWorker from'./serviceWorker';import Chart from\"react-google-charts\";import io from'socket.io-client';import $ from'jquery';import{useEffect,useState}from'react';import{LineChart,Line,XAxis,YAxis,CartesianGrid,Tooltip,Legend,PieChart,Pie}from'recharts';import{max,min,random,round}from'mathjs';var socket=io('wss://le-18262636.bitzonte.com',{path:'/stocks'});var tickerdict={};$('#connect_button').on('click',function(){socket.connect();console.log('connect');ReactDOM.render(/*#__PURE__*/React.createElement(\"h2\",null,\"Connected\"),document.getElementById('connection'));});$('#disconnect_button').on('click',function(){socket.disconnect();console.log('disconect');ReactDOM.render(/*#__PURE__*/React.createElement(\"h2\",null,\"Disconnected\"),document.getElementById('connection'));});var Stocks=function Stocks(_ref){_objectDestructuringEmpty(_ref);var _useState=useState([]),_useState2=_slicedToArray(_useState,2),updates=_useState2[0],setUpdates=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),stocks=_useState4[0],setStocks=_useState4[1];var _useState5=useState([]),_useState6=_slicedToArray(_useState5,2),exchanges=_useState6[0],setExchanges=_useState6[1];var _useState7=useState([]),_useState8=_slicedToArray(_useState7,2),buys=_useState8[0],setBuys=_useState8[1];var _useState9=useState([]),_useState10=_slicedToArray(_useState9,2),sells=_useState10[0],setSells=_useState10[1];var _useState11=useState(0),_useState12=_slicedToArray(_useState11,2),volumen_total=_useState12[0],setVolumen=_useState12[1];useEffect(function(){// ESCUCHANDO\nsocket.on('UPDATE',function(update){var date=new Date(update.time*1000);setUpdates(function(currentData){return[].concat(_toConsumableArray(currentData),[{\"ticker\":update.ticker,\"time\":date,\"value\":update.value}]);});});socket.on('BUY',function(buy){var date=new Date(buy.time*1000);setBuys(function(currentData){return[].concat(_toConsumableArray(currentData),[{\"ticker\":buy.ticker,\"time\":date,\"volume\":buy.volume}]);});//console.log(buy.volume);\nsetVolumen(function(volumen_total){return volumen_total+buy.volume;});});socket.on('SELL',function(sell){var date=new Date(sell.time*1000);setSells(function(currentData){return[].concat(_toConsumableArray(currentData),[{\"ticker\":sell.ticker,\"time\":date,\"volume\":sell.volume}]);});//console.log(sell.volume);\nsetVolumen(function(volumen_total){return volumen_total+sell.volume;});});//EMITO, LUEGO ESCUCHO\nsocket.emit('STOCKS');socket.on('STOCKS',function(data){setStocks(function(currentData){return data;});for(var d in data){tickerdict[data[d].company_name]=data[d].ticker;}//console.log(tickerdict);\n});socket.emit('EXCHANGES');socket.on('EXCHANGES',function(data){setExchanges(function(currentData){return data;});});},[]);var table=[];var pie_chart=[];//console.log(buys);\n//console.log(sells);\nfor(var ex in exchanges){var volumen_compra=0;var volumen_venta=0;var acciones=[];var exchange=exchanges[ex];//console.log(exchange);\nacciones=exchange.listed_companies;//console.log(acciones);\nfor(var accion in acciones){//console.log(tickerdict);\nvar ticker=tickerdict[acciones[accion]];//console.log(ticker);\nvar buys_ticker=buys.filter(function(b){return b.ticker===ticker;});//console.log(buys_ticker);\nvar sells_ticker=sells.filter(function(s){return s.ticker===ticker;});for(var buy in buys_ticker){//console.log(buys[buy].volume);\nvolumen_compra+=buys_ticker[buy].volume;};for(var sell in sells_ticker){volumen_venta+=sells_ticker[sell].volume;};};if(volumen_total>0){//pie_chart[exchange.name] = (volumen_compra + volumen_venta)/volumen_total;\npie_chart.push({\"name\":exchange.name,\"value\":round((volumen_compra+volumen_venta)/volumen_total*100)});}table.push(/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,exchange.name),/*#__PURE__*/React.createElement(\"td\",null,volumen_compra),/*#__PURE__*/React.createElement(\"td\",null,volumen_venta),/*#__PURE__*/React.createElement(\"td\",null,volumen_compra+volumen_venta),/*#__PURE__*/React.createElement(\"td\",null,acciones.length),/*#__PURE__*/React.createElement(\"td\",null,round((volumen_compra+volumen_venta)/volumen_total*100))));};var graphs=[];for(var empresa in stocks){var elem=stocks[empresa];//console.log(elem);\nvar maximo_historico;var minimo_historico;var ultimo_valor;var penultimo_valor;var var_porcentual;var prices=updates.filter(function(update){return update.ticker===elem.ticker;});var valores_totales=prices.map(function(p){return p.value;});if(valores_totales.length!==0){maximo_historico=max(valores_totales);minimo_historico=min(valores_totales);ultimo_valor=valores_totales[valores_totales.length-1];if(valores_totales.length>1){penultimo_valor=valores_totales[valores_totales.length-2];var_porcentual=(ultimo_valor-penultimo_valor)/penultimo_valor*100;}}//console.log(elem.ticker);\ngraphs.push(/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"h2\",null,\"Empresa: \",elem.company_name),/*#__PURE__*/React.createElement(\"h3\",null,\"Moneda: \",elem.quote_base),/*#__PURE__*/React.createElement(\"h3\",null,\"Pa\\xEDs: \",elem.country),/*#__PURE__*/React.createElement(\"p\",null,\"Valor m\\xE1ximo: \",maximo_historico),/*#__PURE__*/React.createElement(\"p\",null,\"Valor m\\xEDnimo: \",minimo_historico),/*#__PURE__*/React.createElement(\"p\",null,\"\\xDAltimo precio: \",ultimo_valor),/*#__PURE__*/React.createElement(\"p\",null,\"Variaci\\xF3n porcentual: \",var_porcentual,\"%\"),/*#__PURE__*/React.createElement(LineChart,{width:1000,height:300,data:prices,margin:{top:5,right:30,left:20,bottom:5}},/*#__PURE__*/React.createElement(CartesianGrid,{strokeDasharray:\"3 3\"}),/*#__PURE__*/React.createElement(XAxis,{dataKey:\"time\"}),/*#__PURE__*/React.createElement(YAxis,{label:elem.quote_base}),/*#__PURE__*/React.createElement(Tooltip,null),/*#__PURE__*/React.createElement(Legend,null),/*#__PURE__*/React.createElement(Line,{type:\"monotone\",dataKey:\"value\",label:\"Valor acci\\xF3n\",stroke:\"#82ca9d\"}))));};return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"h1\",null,\"Mercado de valores\"),/*#__PURE__*/React.createElement(\"table\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"th\",null,\"Nombre\"),/*#__PURE__*/React.createElement(\"th\",null,\"Volumen de compra\"),/*#__PURE__*/React.createElement(\"th\",null,\"Volumen de venta\"),/*#__PURE__*/React.createElement(\"th\",null,\"Volumen total\"),/*#__PURE__*/React.createElement(\"th\",null,\"N\\xFAmero de acciones\"),/*#__PURE__*/React.createElement(\"th\",null,\"Porcentaje de Mercado\")),table),/*#__PURE__*/React.createElement(\"h1\",null,\"Porcentajes de mercado\"),/*#__PURE__*/React.createElement(\"p\",null,\"Total mercado:\",volumen_total),/*#__PURE__*/React.createElement(PieChart,{width:400,height:400},/*#__PURE__*/React.createElement(Pie,{dataKey:\"value\",isAnimationActive:false,data:pie_chart,cx:200,cy:200,outerRadius:80,fill:\"#8884d8\",label:true}),/*#__PURE__*/React.createElement(Tooltip,null)),/*#__PURE__*/React.createElement(\"h1\",null,\"Precio acciones\"),graphs);};ReactDOM.render(/*#__PURE__*/React.createElement(Stocks,null),document.getElementById('root'));// function tick() {\n//   const element = (\n//     <div style={{ display: 'flex', maxWidth: 900 }}>\n//   <Chart\n//     width={400}\n//     height={300}\n//     chartType=\"ColumnChart\"\n//     loader={<div>Loading Chart</div>}\n//     data={[\n//       ['City', '2010 Population', '2000 Population'],\n//       ['New York City, NY', 8175000, 8008000],\n//       ['Los Angeles, CA', 3792000, 3694000],\n//       ['Chicago, IL', 2695000, 2896000],\n//       ['Houston, TX', 2099000, 1953000],\n//       ['Philadelphia, PA', 1526000, 1517000],\n//     ]}\n//     options={{\n//       title: 'Population of Largest U.S. Cities',\n//       chartArea: { width: '30%' },\n//       hAxis: {\n//         title: 'Total Population',\n//         minValue: 0,\n//       },\n//       vAxis: {\n//         title: 'City',\n//       },\n//     }}\n//     legendToggle\n//   />\n//   <Chart\n//     width={400}\n//     height={'300px'}\n//     chartType=\"AreaChart\"\n//     loader={<div>Loading Chart</div>}\n//     data={[\n//       ['Year', 'Sales', 'Expenses'],\n//       ['2013', 1000, 400],\n//       ['2014', 1170, 460],\n//       ['2015', 660, 1120],\n//       ['2016', 1030, 540],\n//     ]}\n//     options={{\n//       title: 'Company Performance',\n//       hAxis: { title: 'Year', titleTextStyle: { color: '#333' } },\n//       vAxis: { minValue: 0 },\n//       // For the legend to fit, we make the chart area smaller\n//       chartArea: { width: '50%', height: '70%' },\n//       // lineWidth: 25\n//     }}\n//   />\n// </div>\n//   );\n//   ReactDOM.render(element, document.getElementById('root'));\n// }\n//\n// setInterval(tick, 1000);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();","map":{"version":3,"sources":["/Users/Bernardita/Desktop/Taller de integracioÃÅn/T3/t3-ti/src/index.js"],"names":["React","ReactDOM","serviceWorker","Chart","io","$","useEffect","useState","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","PieChart","Pie","max","min","random","round","socket","path","tickerdict","on","connect","console","log","render","document","getElementById","disconnect","Stocks","updates","setUpdates","stocks","setStocks","exchanges","setExchanges","buys","setBuys","sells","setSells","volumen_total","setVolumen","update","date","Date","time","currentData","ticker","value","buy","volume","sell","emit","data","d","company_name","table","pie_chart","ex","volumen_compra","volumen_venta","acciones","exchange","listed_companies","accion","buys_ticker","filter","b","sells_ticker","s","push","name","length","graphs","empresa","elem","maximo_historico","minimo_historico","ultimo_valor","penultimo_valor","var_porcentual","prices","valores_totales","map","p","quote_base","country","top","right","left","bottom","unregister"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Chart from \"react-google-charts\";\nimport io from 'socket.io-client';\nimport $ from 'jquery';\nimport { useEffect, useState } from 'react';\nimport {\n  LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, PieChart, Pie\n} from 'recharts';\nimport {\n  max, min, random, round\n} from 'mathjs'\n\nconst socket = io('wss://le-18262636.bitzonte.com', {\n  path: '/stocks'\n});\n\nvar tickerdict = {};\n\n$('#connect_button').on('click', function(){\n  socket.connect();\n  console.log('connect');\n  ReactDOM.render(<h2>Connected</h2>, document.getElementById('connection'));\n});\n\n$('#disconnect_button').on('click', function(){\n  socket.disconnect();\n  console.log('disconect');\n  ReactDOM.render(<h2>Disconnected</h2>, document.getElementById('connection'));\n});\n\nconst Stocks = ({}) => {\n  const [updates, setUpdates] = useState([]);\n  const [stocks, setStocks] = useState([]);\n  const [exchanges, setExchanges] = useState([]);\n  const [buys, setBuys] = useState([]);\n  const [sells, setSells] = useState([]);\n  const [volumen_total, setVolumen] = useState(0);\n\n  useEffect(() =>{\n    // ESCUCHANDO\n    socket.on('UPDATE', update => {\n      var date = new Date(update.time*1000);\n      setUpdates(currentData => [...currentData, {\"ticker\": update.ticker, \"time\": date, \"value\": update.value }]);\n    });\n    socket.on('BUY', buy =>{\n      var date = new Date(buy.time*1000);\n      setBuys(currentData => [...currentData, {\"ticker\": buy.ticker, \"time\": date, \"volume\": buy.volume }]);\n      //console.log(buy.volume);\n      setVolumen(volumen_total => volumen_total + buy.volume);\n    })\n    socket.on('SELL', sell =>{\n      var date = new Date(sell.time*1000);\n      setSells(currentData => [...currentData, {\"ticker\": sell.ticker, \"time\": date, \"volume\": sell.volume }]);\n      //console.log(sell.volume);\n      setVolumen(volumen_total => volumen_total + sell.volume);\n    })\n    //EMITO, LUEGO ESCUCHO\n    socket.emit('STOCKS');\n    socket.on('STOCKS', data => {\n      setStocks(currentData => data);\n      for(var d in data)\n      {\n        tickerdict[data[d].company_name] = data[d].ticker;\n      }\n      //console.log(tickerdict);\n    });\n    socket.emit('EXCHANGES');\n    socket.on('EXCHANGES', data => {\n      setExchanges(currentData => data);\n    });\n  }, []);\n\n  var table = [];\n  var pie_chart = [];\n  //console.log(buys);\n  //console.log(sells);\n\n  for(var ex in exchanges)\n  {\n    var volumen_compra = 0;\n    var volumen_venta = 0;\n    var acciones = [];\n    var exchange = exchanges[ex];\n    //console.log(exchange);\n    acciones = exchange.listed_companies;\n    //console.log(acciones);\n    for(var accion in acciones)\n    {\n      //console.log(tickerdict);\n      var ticker = tickerdict[acciones[accion]];\n      //console.log(ticker);\n      var buys_ticker = buys.filter(b => b.ticker === ticker);\n      //console.log(buys_ticker);\n      var sells_ticker = sells.filter(s => s.ticker === ticker);\n      for (var buy in buys_ticker)\n      {\n        //console.log(buys[buy].volume);\n        volumen_compra += buys_ticker[buy].volume;\n      };\n      for (var sell in sells_ticker)\n      {\n        volumen_venta += sells_ticker[sell].volume;\n      };\n    };\n    if(volumen_total > 0)\n    {\n      //pie_chart[exchange.name] = (volumen_compra + volumen_venta)/volumen_total;\n      pie_chart.push({\"name\": exchange.name, \"value\": round(((volumen_compra + volumen_venta)/volumen_total)*100)});\n    }\n    table.push(<tr>\n    <td>{exchange.name}</td>\n    <td>{volumen_compra}</td>\n    <td>{volumen_venta}</td>\n    <td>{volumen_compra+volumen_venta}</td>\n    <td>{acciones.length}</td>\n    <td>{round(((volumen_compra + volumen_venta)/volumen_total)*100)}</td>\n  </tr>)\n\n  };\n\n\n  var graphs = [];\n  for(var empresa in stocks)\n  {\n    var elem = stocks[empresa];\n    //console.log(elem);\n    var maximo_historico;\n    var minimo_historico;\n    var ultimo_valor;\n    var penultimo_valor;\n    var var_porcentual;\n    var prices = updates.filter(update => update.ticker === elem.ticker);\n    var valores_totales = prices.map(function(p){ return p.value } );\n    if(valores_totales.length !== 0)\n    {\n      maximo_historico = max(valores_totales);\n      minimo_historico = min(valores_totales);\n      ultimo_valor = valores_totales[valores_totales.length - 1];\n      if(valores_totales.length > 1)\n      {\n        penultimo_valor = valores_totales[valores_totales.length - 2];\n        var_porcentual = (ultimo_valor-penultimo_valor)/penultimo_valor*100;\n      }\n    }\n    //console.log(elem.ticker);\n    graphs.push(<div>\n    <h2>Empresa: {elem.company_name}</h2>\n    <h3>Moneda: {elem.quote_base}</h3>\n    <h3>Pa√≠s: {elem.country}</h3>\n    <p>Valor m√°ximo: {maximo_historico}</p>\n    <p>Valor m√≠nimo: {minimo_historico}</p>\n    <p>√öltimo precio: {ultimo_valor}</p>\n    <p>Variaci√≥n porcentual: {var_porcentual}%</p>\n    <LineChart\n      width={1000}\n      height={300}\n      data={prices}\n      margin={{\n        top: 5, right: 30, left: 20, bottom: 5,\n      }}\n    >\n      <CartesianGrid strokeDasharray=\"3 3\" />\n      <XAxis dataKey=\"time\" />\n      <YAxis label={elem.quote_base}/>\n      <Tooltip />\n      <Legend />\n      <Line type=\"monotone\" dataKey=\"value\" label=\"Valor acci√≥n\" stroke=\"#82ca9d\" />\n    </LineChart>\n    </div>);\n  };\n  return(\n    <div>\n      <h1>Mercado de valores</h1>\n      <table>\n      <tr>\n        <th>Nombre</th>\n        <th>Volumen de compra</th>\n        <th>Volumen de venta</th>\n        <th>Volumen total</th>\n        <th>N√∫mero de acciones</th>\n        <th>Porcentaje de Mercado</th>\n      </tr>\n      {table}\n      </table>\n      <h1>Porcentajes de mercado</h1>\n      <p>Total mercado:{volumen_total}</p>\n      <PieChart width={400} height={400}>\n        <Pie dataKey=\"value\" isAnimationActive={false} data={pie_chart} cx={200} cy={200} outerRadius={80} fill=\"#8884d8\" label/>\n        <Tooltip />\n      </PieChart>\n      <h1>Precio acciones</h1>\n      {graphs}\n    </div>\n  );\n};\n\nReactDOM.render(<Stocks />, document.getElementById('root'));\n\n\n\n// function tick() {\n//   const element = (\n//     <div style={{ display: 'flex', maxWidth: 900 }}>\n//   <Chart\n//     width={400}\n//     height={300}\n//     chartType=\"ColumnChart\"\n//     loader={<div>Loading Chart</div>}\n//     data={[\n//       ['City', '2010 Population', '2000 Population'],\n//       ['New York City, NY', 8175000, 8008000],\n//       ['Los Angeles, CA', 3792000, 3694000],\n//       ['Chicago, IL', 2695000, 2896000],\n//       ['Houston, TX', 2099000, 1953000],\n//       ['Philadelphia, PA', 1526000, 1517000],\n//     ]}\n//     options={{\n//       title: 'Population of Largest U.S. Cities',\n//       chartArea: { width: '30%' },\n//       hAxis: {\n//         title: 'Total Population',\n//         minValue: 0,\n//       },\n//       vAxis: {\n//         title: 'City',\n//       },\n//     }}\n//     legendToggle\n//   />\n//   <Chart\n//     width={400}\n//     height={'300px'}\n//     chartType=\"AreaChart\"\n//     loader={<div>Loading Chart</div>}\n//     data={[\n//       ['Year', 'Sales', 'Expenses'],\n//       ['2013', 1000, 400],\n//       ['2014', 1170, 460],\n//       ['2015', 660, 1120],\n//       ['2016', 1030, 540],\n//     ]}\n//     options={{\n//       title: 'Company Performance',\n//       hAxis: { title: 'Year', titleTextStyle: { color: '#333' } },\n//       vAxis: { minValue: 0 },\n//       // For the legend to fit, we make the chart area smaller\n//       chartArea: { width: '50%', height: '70%' },\n//       // lineWidth: 25\n//     }}\n//   />\n// </div>\n//   );\n//   ReactDOM.render(element, document.getElementById('root'));\n// }\n//\n// setInterval(tick, 1000);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}